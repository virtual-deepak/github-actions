name: Container Workflow
on:
  workflow_dispatch:
    inputs:
      image-name:
        description: 'Enter image name'
        required: true
      acr-server:
        description: 'Enter ACR server name'
        required: true
      client-id:
        description: 'Enter Service Principal Client Id'
        required: true
      client-secret:
        description: 'Enter Service Principal Client Secret'
        required: true

env:
  server-image-path: ${{ format('{0}/{1}', github.event.inputs.acr-server, github.event.inputs.image-name) }} 
jobs:
  build-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: List files in GitHub workspace
        run: ls -R ${{ github.workspace }}
      - name: Check Docker file existence
        run: |
          if ! [ -e ./sample-mvc-docker-app/Dockerfile ]
          then
            exit 1
          fi
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.server-image-path }}
          username: ${{ github.event.inputs.client-id }}
          password: ${{ github.event.inputs.client-secret }}
      - name: Build image
        run: docker build ./sample-mvc-docker-app -t ${{ github.event.inputs.image-name }}
      - name: Tag Image
        run: docker tag ${{ github.event.inputs.image-name }} ${{ env.server-image-path }}
      - name: Push image
        run: docker push ${{ env.server-image-path }}
  deploy-to-K8s:
    runs-on: ubuntu-latest
    needs: build-push-image
    #env:
        #NAMESPACE: dummy # If using K8s namespaces
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set the AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          resource-group: '${{ secrets.AZURE_RESOURCE_GROUP }}'
          cluster-name: '${{ secrets.AKS_NAME }}'
      # Create namespace if doesn't exist
      # - run: |
      #    kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      - name: Set Image Pull Secret
        uses: azure/k8s-create-secret@v4
        with:
          # namespace: ''
          secret-name: '${{ secrets.AKS_IMAGE_PULL_SECRET }}'
          container-registry-url: '${{ github.event.inputs.acr-server }}'
          container-registry-username: ${{ github.event.inputs.client-id }}
          container-registry-password: ${{ github.event.inputs.client-secret }}
        id: create-secret
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v4.9
        with:
          manifests: |
            ./sample-mvc-docker-app/manifests/deployment.yml
            ./sample-mvc-docker-app/manifests/service.yml
          images: ${{ env.server-image-path }}
          imagepullsecrets: ${{ secrets.AKS_SECRET }}

